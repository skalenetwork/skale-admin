""" SKALE DKG test utilities """

from sgx import SgxClient
from sgx.sgx_rpc_handler import SgxServerError

from core.schains.dkg.main import DKGResult
from core.schains.dkg.status import DKGStatus

from tools.configs import SGX_SERVER_URL, SGX_CERTIFICATES_FOLDER


INSECURE_PRIVATE_KEY = "f253bad7b1f62b8ff60bbf451cf2e8e9ebb5d6e9bff450c55b8d5504b8c63d3"
SECRET_KEY_INFO = {
    "common_public_key": [
        "15959969554621958245201075983340071881770733084910870228938077786643587385029",
        "7970122607051572307517094692346020360016825923464107614135327251488152616550",
        "3371162264373897025322009434717052197952692496405149486989861571246537813591",
        "13678625751515504401110635369790787716744686498431213713911601759809559919693"
    ],
    "public_key": [
        "15959969554621958245201075983340071881770733084910870228938077786643587385029",
        "7970122607051572307517094692346020360016825923464107614135327251488152616550",
        "3371162264373897025322009434717052197952692496405149486989861571246537813591",
        "13678625751515504401110635369790787716744686498431213713911601759809559919693"
    ],
    "bls_public_keys": [
        "15959969554621958245201075983340071881770733084910870228938077786643587385029:"
        "7970122607051572307517094692346020360016825923464107614135327251488152616550:"
        "3371162264373897025322009434717052197952692496405149486989861571246537813591:"
        "13678625751515504401110635369790787716744686498431213713911601759809559919693",
        "15959969554621958245201075983340071881770733084910870228938077786643587385029:"
        "7970122607051572307517094692346020360016825923464107614135327251488152616550:"
        "3371162264373897025322009434717052197952692496405149486989861571246537813591:"
        "13678625751515504401110635369790787716744686498431213713911601759809559919693"
    ],
    "t": 1,
    "n": 1,
    "key_share_name": "BLS_KEY:SCHAIN_ID:1:NODE_ID:0:DKG_ID:0"
}


def get_bls_public_keys():
    return {
        'blsPublicKey0': SECRET_KEY_INFO["common_public_key"][0],
        'blsPublicKey1': SECRET_KEY_INFO["common_public_key"][1],
        'blsPublicKey2': SECRET_KEY_INFO["common_public_key"][2],
        'blsPublicKey3': SECRET_KEY_INFO["common_public_key"][3]
    }


def safe_run_dkg_mock(skale, schain_name, node_id, sgx_key_name, rotation_id):
    import_bls_key()
    return DKGResult(status=DKGStatus.DONE, keys_data=SECRET_KEY_INFO)


def import_bls_key():
    sgx_client = SgxClient(SGX_SERVER_URL, n=1, t=1, path_to_cert=SGX_CERTIFICATES_FOLDER)
    try:
        sgx_client.import_bls_private_key(
            SECRET_KEY_INFO['key_share_name'], INSECURE_PRIVATE_KEY
        )
    except SgxServerError as e:
        if str(e) == 'Key share with this name already exists':
            pass
